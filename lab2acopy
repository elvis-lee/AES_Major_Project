#include <stdio.h>
#include <stdlib.h>
#include"xuartps_hw.h"

#define BUF_SIZE 30720




const unsigned char INV_SBOX[16][16] = {
	{0x52, 0x9, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
	{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
	{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
	{0x8, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
	{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
	{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
	{0x90, 0xd8, 0xab, 0x0, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x5, 0xb8, 0xb3, 0x45, 0x6},
	{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x2, 0xc1, 0xaf, 0xbd, 0x3, 0x1, 0x13, 0x8a, 0x6b},
	{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
	{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
	{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
	{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
	{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x7, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
	{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
	{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
	{0x17, 0x2b, 0x4, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
	};

const unsigned char SBOX[16][16] = {
    {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x1, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
	{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
	{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
	{0x4, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x5, 0x9a,  0x7, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
	{0x9, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
	{0x53, 0xd1, 0x0, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
	{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x2, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
	{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
	{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
	{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
	{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x6, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
	{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x8},
	{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
	{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x3, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
	{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
	{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
};

const unsigned char RoundConstant[4][10] = {
    {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
};

const unsigned char INV_C[4][4] = {
    {0x0e, 0x0b, 0x0d, 0x09},
    {0x09, 0x0e, 0x0b, 0x0d},
    {0x0d, 0x09, 0x0e, 0x0b},
    {0x0b, 0x0d, 0x09, 0x0e}
};


static unsigned char xtime(unsigned char x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
}


static unsigned char Multiply(unsigned char x, unsigned char y)
{
  return (((y & 1) * x) ^
       ((y>>1 & 1) * xtime(x)) ^
       ((y>>2 & 1) * xtime(xtime(x))) ^
       ((y>>3 & 1) * xtime(xtime(xtime(x)))) ^
       ((y>>4 & 1) * xtime(xtime(xtime(xtime(x))))));
}


void compareFile()
{
    int i;

    unsigned char* buf1 = (unsigned char*) malloc(sizeof(unsigned char)*BUF_SIZE);
    unsigned char* buf2 = (unsigned char*) malloc(sizeof(unsigned char)*BUF_SIZE);

    FILE *fp1 = fopen("./buildings.nus", "rb");
    FILE *fp2 = fopen("./buildings.df", "rb");

    if (!fp1 || !fp2)
        printf("File opening error\n");

    printf("Comparing [buildings.nus] & [buildings.df]...\n");

    fread(buf1, sizeof(unsigned char), BUF_SIZE, fp1);
    fread(buf2, sizeof(unsigned char), BUF_SIZE, fp2);

    for (i=0; i<BUF_SIZE; i++)
    {
        if (buf1[i]!=buf2[i])
        {
            printf("File contents differ!\n");
            fclose(fp1);
            fclose(fp2);
            return;
        }
    }

    printf("Files are the same!\n");

    fclose(fp1);
    fclose(fp2);
}


void rotateWord(const unsigned char* pIn, unsigned char* pOut, int size, int offset)
{
    // offset[-ve] -> shift left; offset[+ve] -> shift right
    int i;
    for (i=0; i<size; i++)
        pOut[(i + offset + 4) % 4] = pIn[i];
}

void subByte(unsigned char* pIn, int sub)
{
    int i = (int)(*pIn) / 16;
    int j = (int)(*pIn) % 16;

    if (sub)
        *pIn = SBOX[i][j];
    else
        *pIn = INV_SBOX[i][j];
}

void genKey(const unsigned char* pIn, unsigned char* pOut, int round)
{
    if (round==0)
        return;

    int i;

    // calculate ti
    unsigned char w3_r[4], t[4];
    rotateWord(&pIn[12], w3_r, 4, -1);
    for (i=0; i<4; i++)
        subByte(&w3_r[i], 1);
    for (i=0; i<4; i++)
        t[i] = w3_r[i]^RoundConstant[i][round-1];

    for (i=0; i<4; i++)
    {
        pOut[0+i] = pIn[0+i]^t[i];
        pOut[4+i] = pIn[4+i]^pOut[0+i];
        pOut[8+i] = pIn[8+i]^pOut[4+i];
        pOut[12+i] = pIn[12+i]^pOut[8+i];
    }
}

void extractState(const unsigned char* buf_ptr, unsigned char* s_ptr, int startPos)
{
    int i;

    for (i=0; i<16; i++)
        s_ptr[i] = buf_ptr[startPos+i];

}

void copyState(const unsigned char* s_ptr, unsigned char* buf_ptr, int startPos)
{
    int i;

    for (i=0; i<16; i++)
        buf_ptr[startPos+i] = s_ptr[i];
}

//potential error!
void invMixCol(unsigned char* pIn)
{
    int i,j;
    unsigned char tmp[4];

    for (i=0; i<4; i++)
        tmp[i] = Multiply(pIn[0], INV_C[i][0]) ^ Multiply(pIn[1], INV_C[i][1]) ^ Multiply(pIn[2], INV_C[i][2]) ^ Multiply(pIn[3], INV_C[i][3]);

    for (i=0; i<4; i++)
        pIn[i] = tmp[i];
}

void getRow(const unsigned char* pIn, int rowNo, unsigned char* pOut)
{
    pOut[0] = pIn[0+rowNo];
    pOut[1] = pIn[4+rowNo];
    pOut[2] = pIn[8+rowNo];
    pOut[3] = pIn[12+rowNo];
}

void copyRow(const unsigned char* pIn, int rowNo, unsigned char*pOut)
{

    pOut[0+rowNo] = pIn[0];
    pOut[4+rowNo] = pIn[1];
    pOut[8+rowNo] = pIn[2];
    pOut[12+rowNo] = pIn[3];

}


void readEncryptFile (unsigned char* buffer_ptr)
{
	int i;
  //  unsigned char* keytem;
    unsigned char* buffertem;
 //   keytem=key_ptr;
    buffertem=buffer_ptr;
   /* for (i=0;i<16;i++)
        {u8 data=XUartPs_RecvByte(0xE0001000);
         *keytem=data;
          keytem++;
        }*/
    for (i=0;i<BUF_SIZE;i++)
      {unsigned char data=XUartPs_RecvByte(0xE0001000);
       *buffertem=data;
        buffertem++;
      }
 //   xil_printf("%d",buffertem-buffer_ptr);
}

void readKey (unsigned char* key_ptr)
{
	unsigned char* ptr;
	int i;
    ptr=key_ptr;
   //  xil_printf("Please send your key for decryption\n");
     //scanf("%s",key_ptr);
       for (i=0;i<16;i++)
          {unsigned char data=XUartPs_RecvByte(0xE0001000);
           *ptr=data;
            ptr++;
          }
       for (i = 0; i <16; i++)
       		printf("%c",ptr[i]);

   //  xil_printf("Your key is ready");
}

void writeFile (const unsigned char* buffer_ptr)
{
const	unsigned char* p;
    int i;
    p = buffer_ptr;
    for (i=0; i<BUF_SIZE; i++)
     {
      XUartPs_SendByte(0xE0001000, *p);
      p++;
	 }
  //  xil_printf("%d",p-buffer_ptr);
}


int main()
{

    int i, j, numRound, block=0;
    unsigned char* buffer = (unsigned char*) malloc(sizeof(unsigned char)*BUF_SIZE);
    unsigned char* state = (unsigned char*) malloc(sizeof(unsigned char)*16);
    unsigned char* key = (unsigned char*) malloc(sizeof(unsigned char)*16);
    unsigned char rk[11][16];
    unsigned char* buffernew = buffer + 16;

    readKey(key);
  /*  xil_printf("Key: ");
    for (i=0; i<16; i++)
        xil_printf("%c", key[i]);
    xil_printf("\n");
*/
    readEncryptFile(buffer);



    for (i=0; i<16; i++)
        rk[0][i] = key[i];

    for (i=1; i<11; i++)
        genKey(&rk[i-1], &rk[i], i);

    while (1)
    {
        int pos = block * 16;
        if (pos >= BUF_SIZE)
            break;

        extractState(buffernew, state, pos);

        //adding round key for two times returns the original value
        for (i=0; i<16; i++)
            state[i] = state[i] ^ rk[10][i];

        unsigned char row[4], tmp[4];

        for (numRound=9; numRound>0; numRound--)
        {

            //inv shift row
            for (i=0; i<4; i++)
            {
                getRow(state, i, row);
                rotateWord(row, tmp, 4, i);
                copyRow(tmp, i, state);
            }

            //inv sub bytes
            for (i=0; i<16; i++)
                subByte(&state[i], 0);

            //add round key
            for (i=0; i<16; i++)
                state[i] = state[i] ^ rk[numRound][i];

            //inv mix col
            for (i=0; i<4; i++)
                invMixCol(&state[i*4]);
        }

        for (i=0; i<4; i++)
        {

            getRow(state, i, row);
            rotateWord(row, tmp, 4, i);
            copyRow(tmp, i, state);
        }

        //inv sub bytes
        for(i=0; i<16; i++)
            subByte(&state[i], 0);

        for (i=0; i<16; i++)
            state[i] = state[i] ^ rk[0][i];

        copyState(state, buffernew, pos);

        block++;

    }

    writeFile(buffernew);


    free(buffer);
    free(state);
    free(key);

    return 0;
}
